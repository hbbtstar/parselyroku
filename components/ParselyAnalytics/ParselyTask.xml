<?xml version="1.0" encoding="UTF-8"?>
<component name="ParselyTask" extends="Task" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="https://devtools.web.roku.com/schema/RokuSceneGraph.xsd">

	<script type="text/brightscript" uri="pkg:/components/ParselyAnalytics/parselyAnalytics.brs" />
	<script type="text/brightscript" >
<![CDATA[
 
Function init()
  m.top.functionName = "execParselyLoop"
  print "init() function of ParselyTask"
end Function

Function execParselyLoop() as Void
  print "execParselyLoop has started"
  port = CreateObject("roMessagePort")
  m.top.observeField("videoStart", port)
  m.top.observeField("heartbeat", port)
    
  
  apikey = "elevatedtoday.com" ' apikey for this channel
  ' Init analytics
  initParsely(apikey)
  print "Enabling tracking analytics"
  enableParsely(true)

  ' Enable or disable debug here for viewing events on the console
  parentNode = m.top.getParent()
  m.videoNode = parentNode.findNode(m.top.videoNodeId)
  m.videoNode.observeField("control", "parselyVideoPlay")
  if m.videoNode.control = "play" then
    parselyVideoPlay()
  end if
  setParselyDebug(true)
  ' Apps which use this long-lived task should delay any writes to the reporting fields (pageView, etc.)
  ' until this is set to true.  This is because there is a non-zero time from setting control = "RUN"
  ' until the time when the reporting fields are being observed.
  m.top.ready = true
  while true
    msg = wait(0, port)
    if type(msg) = "roSGNodeEvent" then
      field = msg.getField()
      data = msg.getData()
      if field = "videoStart" then
        parselyTrackVideoStart(data.metadata)
      end if
      if field = "heartbeat" then
        parselyTrackVideoHeartbeat(data.metadata, data.inc)
      end if
    end if  
  end while  
End Function

Function parselyVideoPlay() As Void
  if m.videoNode.control = "play" then    
    parselyMetadata = parselyGetMetadata()
    parselyTrackVideoStart(parselyMetadata)
  end if
End Function


    
Function parselyGetMetadata() As Object
  if m.videoNode.contentIsPlaylist = false metadataNode = m.videoNode.content else metadataNode= m.videoNode.content[m.videoNode.contentIndex]
  time = CreateObject("roDateTime")
  tmsp = time.AsSeconds().ToStr() + Right("00" + time.GetMilliseconds().ToStr(), 3)
  
  parselyMetadata = {
    title: metadataNode.Title,
    section: metadataNode.ContentType,
    image_url: metadataNode.SDPosterUrl,
    link: metadataNode.contentID,
    duration: metadataNode.Length,
    pub_date_tmsp: tmsp,
    rand: tmsp,
  }

    
  return parselyMetadata
End Function
  
 
]]>
</script>
 
  <interface>
    <!-- 
     - Set to true once the execParselyLoop function is up and observing the reporting fields
     -->
    <field id="ready" type="boolean" value="false"/>

    <!--
      -
      - videoStart should contain:
      -   {
      -     hostname: <optional>
      -     page: <optional>
      -     title:  <optional>
      -   }
      -
      -->
    <field id="videoStart" type="assocarray"/>
    <field id="heartbeat" type="assocarray"/>
    <field id="videoNodeId" type="string" />
    <field id="automatic" type="boolean" value="true" />
    <!--   <children>
   <Timer 
        id="HeartbeatTimer"
        repeat="true"
        duration=10
        </Timer>
    </children>      -->
    
    
		
   
  </interface>
</component>
